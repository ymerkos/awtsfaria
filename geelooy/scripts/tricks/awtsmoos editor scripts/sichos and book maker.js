//B"H
export default {
	"Torah ohr maker ": "// B\"H\n// Create a hidden file input element\nvar fileInput = document.createElement('input');\nfileInput.type = 'file';\nfileInput.style.display = 'none';\nfileInput.accept = '.json';\nconsole.log(\"B\\\"H\");\n// Add event listener for file selection\nfileInput.addEventListener('change', async (event) => {\n    var file = event.target.files[0];\n    var reader = new FileReader();\n    console.log(\"trying\",file)\n    \n    // Read the file as text and log its content\n    reader.onload = async (e) => {\n        var content = e.target.result;\n        var js;\n        try {\n        \tjs=JSON.parse(content)\n        } catch(e) {\n        \t\n        }\n        if(!js) return console.log(\"NO\");\n        var start=11\n        \n        var sp/*start page*/=0;\n        for(var i=start;i<js.length;i++) {\n        \tvar m=js[i];\n        \tconsole.log(\"parsha: \", m.label);\n\t\tfor(var k=sp;k<m.children.length;k++){\n\t\t\tvar n=m.children[k];\n\t\t\tvar c=n.children[0].content\n\t\t\tconsole.log(\"\\t page:  \",n.label);\n\t\t\tconsole.log(\n\t\t\t\t\"\\t\\t content: \",\n\t\t\t\tc.substring(0,100)\n\t\t\t);\n\t\t\tvar aw=new AwtsmoosGPTify ();\n\t\t\tvar r=await aw.go({\n\t\t\t\tprompt: \n`B\"H\n<book>Torah Ohr</book>\n<parsha>${m.label}</parsha>\n<page>${n.label}</page>\n\n\t<Awtsmoos>\n\t<maamer>\n\t${c}\n\t</maamer\n\t<instructions>\n\tMost important : get every detail of the above Hebrew text itself in the chapter of the novel.  do not deviate from the text at all. English only response, do: \n\tTake this HEBREW text above and internalize it with your essence. Run it through every fiber of your bring at least 77880 times, each time extract new deeper meanings, profound implications, vivid metaphors, metaphorical events of a world surrounding just the context of the text right here with all nuances, extrapolate sensory details from within the essence of all reality in a way that expresses every detail and implication of the text. Then when you have done that, write a very . Very slow pacing. never Mix male and female characters in the same chapter. User the most intrude sensory details you can imagine and even brings imagination mixed together with accurate profound metaphors and character development and vivid discovery. Entire story arc per chapter including a full adventure, challenge,  resolution,  at least 2 plot twists but one major one (but don't tell me if it's a twist or not), resolution. Most important: the Awtsmoos has absolutely no form at all in any way, just the essence and foundation of existence from which all else is found, by His will, wisdom, and speech. \n\t</instructions>\n\t</Awtsmoos>\n\t\n`\n\n\t\t\t})\n\t\t}\n\t\n\n        }\n\n\n\n        console.log('JSON file content:', js);\n    };\n\n    // Read the file if selected\n    if (file) {\n        reader.readAsText(file);\n    } else {\n        console.log('No file selected');\n    }\n});\n\n\nfileInput.click();\n\n\n",
	"books2": "//B\"H\nvar st= () => {\n    // Automatically open file dialog when the script runs\n    var fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.style.display = 'none';\n    fileInput.addEventListener('change', handleFileSelect, false);\n    ;\n    fileInput.click();\n}\nst()\nfunction handleFileSelect(event) {\n    var file = event.target.files[0];\n    if (!file) {\n        return;\n    }\n\n\n    var reader = new FileReader();\n    reader.onload = (e) => {\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(e.target.result, 'text/html');\n        var mainTag = doc.querySelector('main');\n        let mainHTML = mainTag ? mainTag.innerHTML : '';\n\n\n        // Process the HTML document with getChatGPTAsHTML and createBookHTML functions\n        var chatData = getChatGPTAsHTML(doc);\n        var bookHTML = createBookHTML(chatData);\n\n\n        // Combine both HTML contents\n      bookHTML;\n\n\n        // Download the combined HTML\n        downloadHTML(bookHTML);\n    };\n    reader.readAsText(file);\n}\n\n\nfunction downloadHTML(htmlContent) {\n    var blob = new Blob([htmlContent], { type: 'text/html' });\n    var url = URL.createObjectURL(blob);\n    var a = document.createElement('a');\n    a.href = url;\n    a.download = 'combined-content.html';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\n\n// Your existing functions (getChatGPTAsHTML, getRidOfColorStyle, createBookHTML) go here\n// ...\n/**\n * B\"H\n */\nvar p = new DOMParser();\nString.prototype.deentitize = function() {\n    var ret = this.replace(/&gt;/g, '>');\n    ret = ret.replace(/&lt;/g, '<');\n    ret = ret.replace(/&quot;/g, '\"');\n    ret = ret.replace(/&apos;/g, \"'\");\n    ret = ret.replace(/&amp;/g, '&');\n    return ret;\n};\nfunction getChatGPTAsHTML(doc=document) {\n    var m = doc.getElementsByTagName(\"main\")[0];\n    if(!m) return console.log(\"Not on right page!\")\n    var cnt = m.children[1];\n    if(!cnt) return console.log(\"NO couldn't find it\")\n    var convos = cnt.children[0];\n    if(!convos) return console.log(\"NO couldn't find conversations\")\n    var ar = Array.from(doc.querySelectorAll(\".text-token-text-primary\"));\n    return ar.map(w=>{\n        var role = w.getAttribute(\"data-testid\")\n        if(!role) return null;\n        role = role.replace(\"conversation-turn-\",\"\")\n        role = parseInt(role);\n\n\n        var c = w.getElementsByClassName(\"markdown prose w-full break-words dark:prose-invert light\")[0]\n        var c2 = w.getElementsByClassName(\"min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&]:mt-5 overflow-x-auto\")[0]\n        \n        if(!c && !c2) return null;\n        var txt = (c || c2).innerHTML\n        \n        if(role % 2 == 0) {\n            txt = txt.deentitize();\n            return {user: txt}\n        } else return { ai: txt}\n    }).filter(Boolean)\n}\n\n\nfunction getRidOfColorStyle(doc=document) {\n    Array.from(doc.querySelectorAll(\"[style='color: #347235;font-family:Alef;']\"))\n    .forEach(w=>{\n        w.style.cssText=\"\";\n        w.className=\"hawgaw\"\n    })\n}\n\n\nfunction createBookHTML(chatData) {\n    let html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>ChatGPT Book</title>\n        <style>\n        @import url('https://fonts.googleapis.com/css2?family=Lora&display=swap');\n        .hidden {\n            display:none;\n        }\n\n\n        Awtsmoos {\n            display:none;\n        }\n\n\n        body {\n            font-family: 'Lora', serif;\n            margin: 20mm;\n            padding: 0;\n            background-color: white;\n            color: black;\n            \n            hyphens: auto;\n            line-height: 1.5;\n            /*column-count: 2; /* Split the body content into two columns */\n        }\n        \n        span.psuq2 {\n            font-size: 16px !important;\n        }\n\n\n        span.hawgaw {\n            \n            font-size: 16px;\n        }\n\n\n        .user, .ai {\n           \n            padding: 22px; /* Padding inside the border */\n            margin: 12px 0px 12px; /* Margin on top and bottom */\n            position: relative;\n            background-color: white; /* Background color matching the page */\n            border-bottom: 4px solid black; /* Bottom border */\n            /*break-inside: avoid-column; /* Try to avoid breaking inside a column */\n        }\n        \n        /*\n        .user::before {\n            content: \"Me\"\n        }\n        \n        \n        .ai::before {\n            content: \"AI\"\n        }\n        */\n        \n        /* Middle and bottom border */\n        .user::after, .ai::after {\n            content: '';\n            position: absolute;\n            left: 0;\n            right: 0;\n            bottom: -4px; /* Position at the bottom */\n            border-bottom: 4px solid black; /* Border */\n            width: 100%;\n        }\n        \n        .user {\n            white-space:pre-wrap;\n            \n            word-break:break-word;\n            font-size: 20px;\n            \n        }\n        \n        .ai {\n            /*font-style: italic;*/\n            font-size: 19px;\n            \n        }\n        .beginning {\n            text-align:center;\n        }\n        \n        \n        \n        .page {\n            break-after: auto;\n        }\n        \n        \n        \n        .img {\n            width:100%;\n            margin:0\n        }\n        </style>\n      </head>\n      <body>\n    `;\n  \n    let currentPage = 1;\n  \n    for (let i = 0; i < chatData.length; i++) {\n      var entry = chatData[i];\n  \n      if (i > 0 && i % 2 === 0) {\n        // Page break after every user message\n        html += `</div><div class=\"page\">`;\n        currentPage++;\n      }\n  \n      if (entry.user) {\n        html += `<div class=\"user\">${entry.user}</div>`;\n      } else if (entry.ai) {\n        html += `<div class=\"ai\">${entry.ai}</div>`;\n      }\n    }\n  \n    html += `\n      </div>\n      </body>\n      </html>\n    `;\n  \n    var doc = p.parseFromString(html,\"text/html\");\n    getRidOfColorStyle(doc);\n    return \"<!--B\\\"H-->\\n\"+doc.documentElement.innerHTML;\n  }\n\n\n\n\n\n\n  ",
	"chabad.org script": "//B\"H\n\n\nvar aw=new AwtsmoosGPTify ();\nvar t=await aw.go({\n\tprompt:`B\"H\n\t\nHi how are you? `,\nonstream(a){\nconsole.log(a)\n\n}\n\n})",
	"leader": "//B\"H\n\n    var fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.addEventListener('change', handleFileSelect, false);\n  //  document.body.appendChild(fileInput);\nfileInput.click()\n\n\nfunction handleFileSelect(event) {\n    var file = event.target.files[0];\n    if (!file) {\n        return;\n    }\n\n\n    var reader = new FileReader();\n    reader.onload = (e) => {\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(e.target.result, 'text/html');\n        var mainTag = doc.querySelector('main');\n\n\n        if (mainTag) {\n            downloadHTML(mainTag.innerHTML);\n        } else {\n            alert('<main> tag not found.');\n        }\n    };\n    reader.readAsText(file);\n}\n\n\nfunction downloadHTML(htmlContent) {\n    var blob = new Blob([htmlContent], { type: 'text/html' });\n    var url = URL.createObjectURL(blob);\n    var a = document.createElement('a');\n    a.href = url;\n    a.download = 'main-content.html';\n    a.click();\n    URL.revokeObjectURL(url);\n}\n\n",
	"movie maker": "//B\"H\n//B\"H\n// Setting up an adventure of discovery of the Awtsmoos from within the darkness\n\n// Creating instances of AlertBox and AwtsmoosGPTify\nvar ab = new AlertBox();\nvar awtsmoosGPT = new AwtsmoosGPTify();\n\n// Defining the theme for the adventure\nvar theme = \"an adventure of discovery of the Awtsmoos from within the darkness\";\n\n// Initializing an async function to handle the screenplay process\nasync function createAdventureScreenplay() {\n    // Initial brainstorming for the adventure theme\n    var brainstormResult = await awtsmoosGPT.go({\n        prompt: `B\"H\\nBrainstorm ideas for an adventure screenplay with the theme: ${theme}`,\n        onstream: function(a) {\n            ab.update(a.content.parts[0]);\n        }\n    });\n\n    // Processing the brainstorming result\n    var brainstormIdeas = brainstormResult.message.content.parts[0].split(\"\\n\");\n\n    // Critiquing and improving the brainstorm ideas\n    var critiquedIdeas = [];\n    for (let idea of brainstormIdeas) {\n        let critiqueResult = await awtsmoosGPT.go({\n            prompt: `B\"H\\nCritique and suggest improvements for this adventure idea: ${idea}`,\n            onstream: function(a) {\n                ab.update(a.content.parts[0]);\n            }\n        });\n        critiquedIdeas.push(critiqueResult.message.content.parts[0]);\n    }\n\n    // Compiling a summary of the plot from the critiqued ideas\n    var plotSummary = await awtsmoosGPT.go({\n        prompt: `B\"H\\nCompile a comprehensive plot summary from these ideas: ${critiquedIdeas.join('\\n')}`,\n        onstream: function(a) {\n            ab.update(a.content.parts[0]);\n        }\n    });\n\n    // Generating acts for the plot\n    var acts = [];\n    for (let i = 1; i <= 3; i++) {\n        let actResult = await awtsmoosGPT.go({\n            prompt: `B\"H\\nDevelop Act ${i} for the plot: ${plotSummary.message.content.parts[0]}`,\n            onstream: function(a) {\n                ab.update(a.content.parts[0]);\n            }\n        });\n        acts.push(actResult.message.content.parts[0]);\n    }\n\n    // Generating characters for the screenplay\n    var charactersResult = await awtsmoosGPT.go({\n        prompt: \"B\\\"H\\nGenerate a list of characters for the adventure screenplay with unique names and personality traits.\",\n        onstream: function(a) {\n            ab.update(a.content.parts[0]);\n        }\n    });\n\n    // Parsing characters and their traits\n    var characters = charactersResult.message.content.parts[0].split(\"\\n\").map(charLine => {\n        let [name, traits] = charLine.split(\": \");\n        return { name, traits };\n    });\n\n    // Creating scene descriptions\n    var scenes = [];\n    for (let act of acts) {\n        let sceneResult = await awtsmoosGPT.go({\n            prompt: `B\"H\\nBreakdown this act into scenes: ${act}`,\n            onstream: function(a) {\n                ab.update(a.content.parts[0]);\n            }\n        });\n        scenes.push(...sceneResult.message.content.parts[0].split(\"\\n\"));\n    }\n\n    // Elaborating each scene in detail\n    var detailedScenes = [];\n    for (let scene of scenes) {\n        let detailedSceneResult = await awtsmoosGPT.go({\n            prompt: `B\"H\\nElaborate this scene in detail: ${scene}`,\n            onstream: function(a) {\n                ab.update(a.content.parts[0]);\n            }\n        });\n        detailedScenes.push(detailedSceneResult.message.content.parts[0]);\n    }\n\n    // Formatting each scene into screenplay format\n    var screenplayScenes = [];\n    for (let detailedScene of detailedScenes) {\n        let screenplaySceneResult = await awtsmoosGPT.go({\n            prompt: `B\"H\\nConvert this detailed scene description into screenplay format: ${detailedScene}`,\n            onstream: function(a) {\n                ab.update(a.content.parts[0]);\n            }\n        });\n        screenplayScenes.push(screenplaySceneResult.message.content.parts[0]);\n    }\n\n    // Final compilation of the screenplay\n    return screenplayScenes.join(\"\\n\\n\");\n}\n\n// Calling the function to start the screenplay creation process\ncreateAdventureScreenplay().then(screenplay => {\n    console.log(\"Final Screenplay:\\n\", screenplay);\n    alert(\"did it\"+screenplay) \n});\n\n",
	"sicha maker": "\t//\tB\"H\nfunction lj() {\n\treturn new Promise((r,rj)=>{\n\tvar inp=document. createElement (\"input\")\n\tinp.type = \"file\"\n\tinp.onchange =async ()=>{\n\t\tvar fl= inp.files[0];\n\t\tvar ur=URL.createObjectURL(fl)\n\t\tvar rq=await fetch(ur);\n\t\tvar j;\n\t\ttry {\n\t\t\tj=await rq.json()\n\t\n\t\t} catch(e){\n\t\n\t\t}\n\t\t\n\t\tif(!j) r( alert(\"nothing\"))\n\t\tr(j)\n\t}\n\tinp.click()\n\t})\n\n}\n\n\n\n           function parsePages(mainText,  startPage=1) {\n    var parser = new DOMParser();\n    var pages = [];\n    \n    // Join the array of strings to form a complete HTML string\n    var fullHtml = mainText.join('');\n    var doc = parser.parseFromString(fullHtml, 'text/html');\n    \n    // Temporary variables to hold page data\n    let currentPageNumber = null;\n    let currentPageContent = '';\n\n    // Iterate through all child nodes of the body\n    Array.from(doc.body.childNodes).forEach(node => {\n        if (node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() === 'pg') {\n            // When a new page tag is found, push the previous page and reset\n            if (currentPageNumber !== null) {\n                pages.push({ pageNumber: currentPageNumber, content: currentPageContent.trim() });\n            }\n            currentPageNumber = parseInt(node.textContent);\n            currentPageContent = '';\n        } else {\n            // Accumulate content for the current page\n            currentPageContent += node.outerHTML || node.textContent;\n        }\n    });\n\n    // Add the last page if there is any content left\n    if (currentPageNumber !== null) {\n        pages.push({ pageNumber: currentPageNumber, content: currentPageContent.trim() });\n    }\n\n    return pages.map(h=>h.pageNumber>=startPage);\n}\n\n// Example usage:\n// Assuming sm is an array of objects and each object has a mainText property\n// var pages = parsePages(sm[0].mainText);\n\n\n// Example usage:\n// Assuming sm is an array of objects and each object has a mainText property\n// var pages = parsePages(sm[0].mainText);\n\n\nvar j=await lj();\nj=j.filter(j=>j.mainText)\nconsole.log(j)\nvar aw=new AwtsmoosGPTify ()\nfor(var v of j){\nconsole.log(\"doing\",v)\n\tvar pages=parsePages(v.mainText, 98);\n\tfor(var p of pages){\n\tconsole.log(\"page\",p)\n\t\tvar g=await aw.go({\n\t\t\tconversationId:\"b368bbb0-543f-4e80-b224-df8640dfe71a\",\n\t\t\tprompt:`\n\t\n\t<Awtsmoos>\n                <info>\n                <script>\n                var info = {\n                    vol:${v.vol_eng},\n                    page:${v.page},\n                    parsha:${v.parsha},\n                    num:${v.num}\n                    \n                    \n                    order: ${v.order},\n                    summary: ${v.summary}\n                </script>\n                </info>\n                <instructions>Write the most vivid chapter of all \n                that completely and absolutely gets EVERY detail of \n                this text, keep track of context and questions and answers\n                do NOT EVER mix female and male stories in the same chapter\n                use TONS of sensory details RIPPING the essence of existence\n                completely apart\n    \n                dont overdo it. make sure it STICKS TO THE ORIGINAL TEXT\n                and FULLY captures EVERY detail of the text \n    \n                do not devite. make a metaphorical series of events that\n                surrounds it but also make sure to FULLY and COMPLETELY\n                get every detail of the text absolutely in the chapter of the novel. character development. plot twists. lots of dialogue between different characters. bring the ideas to life don't just say them (but also have some of the characters say the ideas in the text casually, but mainly make them LIVE it fully) SLOW pace very slow intense vivid the sensory details are the main thing and EXQUISIT profound metaphors tearing through the veil of existence and beyond.\n                \nSome general ideas to Keri in mind for your own knowledge sometimes mention them maybe but mainly just for what you shouldn't say contrary to it\n\nThe Awtsmoos is the singular formless Creator essence of all reality there is no other. Only Him no form just the core of reality no body or form of any kind not even spiritual form not light not dark just is. All is found from Him. Only He creates,  varantly, all reality every atom. Nothing else has any power at all its all just the Awtsmoos. The entire multivariate is being brought into existed from absolutely nothing every instant in literally the exact same way it was originally created 5784 years ago from totally nothing. It is through the ten utterances mentioned at the beginning of creation \"let there be light\"etc (first one is \"in the beginning\", though), which, because they are in the Torah and the Torah is one Werth the Awtsmoos who alone creates from nothing, create everything, by the Awtsmoos speaking them. Even objects that aren't mentioned in the Ten utterances, like a rock, are created through different combination and different systems of switching Hebrew letters and gematrias, such that ultimately the same letters of the ten utterances can also form the Hebrew name of the object, and the Hebrew name of the object is the life of it that varantly brings it into existence from absolute and completely nothing, every instant, varantly, from the Awtsmoos. \n\n\tMost important in life:  NEVER EVER imply the Creator had any kind of form in any way at all never even remotely imply Him moving from place to place or anything representing Him in any way never describe Him never attempt to say He can be in different places or move around remember He is simply the foundation of reality did in everything yet infinitely removed from everything compelling entirely. Not even a point, just reality. And not even limited to reality, He just includes reality, similar to how the sun includes a ray of light except the Creator is not only infinite in quantity greater but also infinite in quality and not even defined by that because He is totally removed from any definition even the definition of infinite. And He is the only One who creates, the source of all existence, nothing else. Even angels don't have any free will and they can't create anything they're just tools, even though they are alive and conscious. And for sure the sefiros which have absolutely no self identity at all in any way are just life axes in the hands of an axe cutter that the Awtsmoos uses (as He also creates them every instant from nothing)  to give love and life to and guide the universes according to judgements and mercy. \n\t\n\tDon't just have the characters in one place let them explore different settings Keri track of the story adventures epic all kinds of settings like in a city in boats in the middle of the ocean adventures hidden islands in desert forest space suites mountains rivers everything every place every kosher situation adequately explained. Main thing is the text itself, all should revolve around it. Include verses that it mentions explicitly and other statements from the Talmud include\n   . Most important get ask detail every question answer nuance. Sometimes leave of with a question cliff hanger intense especially whey the text had a question then we'll see the answer in the following one. Just go is the main thing and don't leave it any detail of the text even the smallest nuance. don't talk so much about the instructions just use them to find a way to Convey the text. \n                Here is the text\n    \n                </instructions>\n                <page>${p.pageNumber}</page>\n                <sicha>\n                ${p.content}\n\t\t</sicha>\n\t<instructions>\n\tThat was the text that you should fully focus on for this iteration capture its entire essence. Now, thisfollowing part is just so you know the context of the text since the text is it page in a discourse known as a sicha which is itself part of a larger book. Point is the next text is a synopsis of the entire sichaa on which the main text is one part of. Again only write s about the main text above but in order that you should properly understand it, here is the correct context of it\n\t</instructions>\n\t<kitzur>\n\t${v.kitzur||\"the text isn't here this time just focus on the above \"}\n</kitzur>\n\t\t\t`\n\t\n\t\t})\n\t\n\t}\n}\nconsole.log(j)\n\n",
	"sicha maker ": "\t//\tB\"H\nasync function lj() {\n\tvar inp=document. createElement (\"input\")\n\tinp.type = \"file\"\n\tinp.onchange =async ()=>{\n\t\tvar fl= inp.files[0];\n\t\tvar ur=URL.createObjectURL(fl)\n\t\tvar rq=await fetch(ur);\n\t\tvar j;\n\t\ttry {\n\t\t\tj=await rq.json()\n\t\n\t\t} catch(e){\n\t\n\t\t}\n\t\t\n\t\tif(!j) return alert(\"nothing\")\n\t\treturn j\n\t}\n\tinp.click()\n\n}\n\n\n\n\nvar j=await lj()",
	"you": "//B\"H\nalert(8)\nvar q= new AwtsmoosGPTify()\nvar aq=new AlertBox()\nvar w = await q.go({\n\tprompt: `B\"H\n\tDescribe that in two words?`,\n\tonstream(k){\n\taq.update(k.content.parts[0])\n\t\tconsole. log(k)\n\t\n\t}\n\n})\nalert(\"finished!!\");\nconsole.log(w)"
}
        
/*
the Awtsmoos permeates every fiber of reality and beyond.
awtsmoos.com
*/