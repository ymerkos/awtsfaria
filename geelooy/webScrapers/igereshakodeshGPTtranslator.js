/**
 * B"H
 * 
 * @requires awtsmoos-gpt.js function
 * 
 * this is used to automate chatgpt translating of 
 * the igeres hakodesh in format generated by rebbeParser.
 * 
 * example of data:
 * 
 * {"pages":{"א":["<p></p>",
 * "<p class=\"bodytext\"></p>",
 * "<p class=\"igroys_bsd\">כ\"א אדר פ\"ח</p>"
 * ,"<p></p>","<p class=\"bodytext\"></p>"
 * ,"<p class=\"igroys_city\">ריגא</p>",
 * "<p></p>","<p class=\"bodytext\"></p>"
 * ,"<p class=\"igroys_address\">כבוד הרה\"ג המפורסם לשם ולתהלה, בקי<br></p>"
 * ,"<p class=\"bodytext\">בחדרי התורה, אוצר בלום וגל אגוזים, שר<br></p>","<p class=\"boetc..
 * 
 */


async function getFiles(
    dir,
    startFolder=0,
    startFile=0,
    startPage=0,
    startPar=0
) {
    var ID ="BH_" +Date.now();
    var prs = new DOMParser();
    var fls = await getFilesInDirectory(dir);
    var i;
    for(
        i = startFolder;
        i < fls.folderNames.length;
        i++
    ) {
        console.log("getting folder",
            fls.folderNames[i]
        )
        var drh = await dir.getDirectoryHandle(fls.folderNames[i]);


        var flnms = await 
        getFilesInDirectory(drh);
        flnms = flnms.fileNames;
        var j;
        for(
            j = startFile;
            j < flnms.length;
            j++
        ) {
            var mdir = await mkdir(
                rn(flnms[j])
                +"_awtsmoos_Translations",
                drh
            );
            
            console.log(
                "getting file",
                flnms[j]
            )
            var file = await getJson(
                flnms[j],
                drh
            );
            if(!file) continue;


            if(!window.
                AwtsmoosGPTify) {
                    console.log("No gpt!");
                    return;
                }
            var pages = Object.keys(
                file.pages
            );

            if(!pages) continue;
            var k;
            for(
                k = startPage;
                k < pages.length;
                k++
            ) {
                var pgdir = await mkdir(
                    k+"_"+
                    ID+"_"+
                    rn(pages[k]),
                    mdir
                );
                var pg = file.pages[pages[k]];/*

                expects an aray of html elements*/

                var p;
                for(
                    p = startPar;
                    p < pg.length;
                    p++
                ) {
                    var cr/*current*/
                        = pg[p];
                    /*parse the p elements skip
                    empty ones*/

                    var parsed = prs.parseFromString(
                        cr, "text/html"
                    );
                    console.log("parsed",parsed.body)
                    var el = parsed.body.children[0];

                    if(!el || !el.innerHTML) continue;

                    var rs = await AwtsmoosGPTify({
                        print:false,
                        prompt: `
                            B"H
                            This is a section of a
                            letter from the Rebbe.

                            Translate it in your own
                            words. Then give a word
                            for word translation

                            in format like

                            {hebrewword}:{english word}

                            for every word.

                            ${el.textContent}
                        `
                    });

                    var fn = rs.message.content.parts[0];


                    var f = await mkfl(
                        rn(p)+".json",
                        pgdir,
                        JSON.stringify({
                            paragraph:p,
                            page:k,
                            file:flnms[j],
                            text:fn
                        })
                    );
                    
                    console.log(fn,"Did");
                }
            }
            
            console.log(f=file)
        }
    }
    return fls;
}

async function doAll(
    startFolder=0,
    startFile=0,
    startPage=0,
    startPar=0
) {
    var dr = await getDir();
    console.log("got main");
    var files = await getFiles(
        dr,
        startFolder,
        startFile,
        startPar
    );
    return files;
}

/**helper functions */

var rnd = 0;
function rn/*rename better*/(t) {
    if(t && typeof(t) == "string")
        return t.split(" ")
        .join("_")
        .split('"')
        .join("-");
    return "BH_"+Date.now()+"_"+(rnd++);
}

async function getDoc(href) {
    var p = new DOMParser();
    var g = await fetch(href);
    var t = await g.text()
    var s = p.parseFromString(t,"text/html")
    return s;
}

async function getDir() {
    return await showDirectoryPicker();
}

async function mkdir(nm, dir) {
    return await dir.getDirectoryHandle(nm, {
        create:true
    });
}

async function exists(nm,dir){
    try{
        var w = await dir.getFileHandle(nm);
        if(w) return true;
    } catch(e){
        return false;
    }
}
/**
 * 
 * @param {String} nm
 *  the name of the file to make 
 * @param {DirectorySystemHandle} dir
 * the parent dir 
 * @param {String} txt
 * content 
 * @returns FileSystemHandle 
 */
async function mkfl(nm, dir, txt) {
    var fh = await dir.getFileHandle(nm, {
        create:true
    });
    var w = await fh.createWritable();
    console.log("About to write to",nm,txt,w)
    await w.write(txt);
    await w.close();
    return fh;
}

async function getJson(nm, dir) {
    var fh = await dir.getFileHandle(nm);
    if(!fh) return null;
    var fl = await fh.getFile();
    var ft = await fetch(URL.createObjectURL(fl));
    var t = await ft.json();
    return t;
}

async function getFilesInDirectory(dirHandle) {
    // The fileNames array is like the Sefira of Yesod, which gathers and harmonizes the input
    var fileNames = [];
    var folderNames = []
    // The "for await...of" loop is like the divine process of creation, 
    // unceasingly bringing forth existence from the void, one at a time
    for await (var entry of dirHandle.values()) {
        // Each iteration is akin to a divine utterance, bringing forth existence from non-existence
        if (entry.kind === 'file') {
            fileNames.push(entry.name);
        } else {
            folderNames.push(entry.name)
        }
    }

    // The return statement is akin to the Sefira of Malchus, where the divine potential becomes actualized in creation
    return {fileNames:fileNames.sort(), folderNames:folderNames.sort()};
}